[
  {
    "path": "posts/2021-05-12-regresso-logstica/",
    "title": "Regressão Logística na Prática",
    "description": "Exemplo e referências de Regressão Logística usando {tidymodels}.",
    "author": [
      {
        "name": "Athos Petri Damiani",
        "url": "https://github.com/athospd"
      }
    ],
    "date": "2021-05-12",
    "categories": [],
    "contents": "\n\nContents\nReferências\nConexão R e SQL\nExemplo de manipulação de dados\nExemplos de Criação de Features janeladas\nExemplo de Fluxo de Trabalho do Tidymodels\nPASSO 0) CARREGAR AS BASES\nPASSO 1) BASE TREINO/TESTE\nPASSO 2) EXPLORAR A BASE\nPASSO 3) DATAPREP\nPASSO 4) MODELO\nPASSO 5) TUNAGEM DE HIPERPARÂMETROS\nPASSO 6) DESEMPENHO DO MODELO FINAL\nVariáveis importantes\nMétricas de desempenho\ngráficos extras\n\nPASSO 7) MODELO FINAL\n\nEXEMPLO DE DASHBOARD (link)\n\nReferências\nR for Data Science\nTidy Modeling With R\npacote {slider}\nFeature Engineering And Selection\nIntroduction To Statistical Learning\nMaterial do Curso de Machine Learning da Curso-R\n\n\n# pacotes ---------------\nlibrary(tidyverse)\n\n\n\nConexão R e SQL\n\n\n# Conexao com SQL --------------------------------------------------------------\ncon <- DBI::dbConnect(RSQLite::SQLite(), \"dados/dados_consultoria.db\")\n\n# Acessando o SQL a partir do R ------------------------------------------------\ntbl(con, \"indicadores\") %>%\n  count(id) %>%\n  show_query()\n\n\n<SQL>\nSELECT `id`, COUNT() AS `n`\nFROM `indicadores`\nGROUP BY `id`\n\n# passando do SQL pro R --------------------------------------------------------\nindicadores <- tbl(con, \"indicadores\") %>% collect()\n\n\n# PS: o SQLite não tem formato de datas, então tem que transformar em data quando vem pro R. Esse problema não tem no MySQL ou no SQL Server.\nindicadores <- indicadores %>%\n  mutate(\n    data = as.Date(data)\n  )\n\n\n\nExemplo de manipulação de dados\nInformação 1 - Sobre os IDs, o cliente informou que deveria ter apenas uma linha para cada trinca (id-ano-mes). Por conta de uma inconsistência, poderia acontecer de virem duas ou mais linhas para o mesma trinca (id-ano-mes). O correto é ter apenas uma linha apenas. Eles disseram que a linha com o maior valor de agendamento tem mais chance de ser a correta.\n\n\n# Solução: arrange() + distinct()\nindicadores <- indicadores %>%\n  dplyr::arrange(desc(agendamento)) %>%\n  dplyr::distinct(id, ano, mes, .keep_all = TRUE)\n\n\n\nInformação 2 - Sobre as séries mensais, o cliente informou que:\nIDs podem ter início e fim distintos.\nA série de meses de um ID não teve ter mês faltante entre seu início e seu fim, porém, em virtude de problemas técnicos, pode haver perda de informação no meio do processo. Assim, nesses casos, orienta-se substituir o valor faltante pelo valor do mês anterior.\n\n\n# Olhando o problema dos meses faltantes\nindicadores %>%\n  ggplot(aes(x = data, y = id, colour = id)) +\n  geom_point(size = 5) \n\n\n\n# Solução: {padr} + {tidyr} (exemplo com o id 970)\nindicadores %>%\n  dplyr::filter(id == 970) %>%\n  dplyr::arrange(data) %>%\n  padr::pad(interval = \"month\", group = \"id\")\n\n\n# A tibble: 9 x 9\n  id    ano   mes   agendamento notificacao alocacao turnoextra cidade\n  <chr> <chr> <chr>       <dbl>       <dbl>    <dbl>      <dbl> <chr> \n1 970   2019  DEZ         0.133       0.056    0.032      0.032 Campo…\n2 970   2020  jan         0           0.06     0.064      0.064 Campo…\n3 970   2020  FEV         0.279       0.051    0          0     Campo…\n4 970   2020  MAR         0           0.061    0.064      0.064 Campo…\n5 970   2020  ABR         0.073       0.059    0.036      0.036 Campo…\n6 970   <NA>  <NA>       NA          NA       NA         NA     <NA>  \n7 970   2020  JUN         0           0.063    0.07       0.07  Campo…\n8 970   2020  JUL         0           0.054    0.217      0.217 Campo…\n9 970   2020  AGO         0           0.059    0.067      0.067 Campo…\n# … with 1 more variable: data <date>\n\nindicadores_com_pad <- indicadores  %>%\n  padr::pad(interval = \"month\", group = \"id\")  \n\n# padr::pad() consertou\nindicadores_com_pad %>%\n  ggplot(aes(x = data, y = id, colour = id)) +\n  geom_point(size = 5) \n\n\n\n# agora tem que preencher os NAs com fill.\nindicadores_com_pad <- indicadores_com_pad %>%\n  dplyr::arrange(id, data) %>%\n  tidyr::fill(agendamento:cidade) %>%\n  dplyr::mutate(\n    # mes e ano não dá pra preencher com fill diretamente\n    mes = as.character(lubridate::month(data)),\n    ano = as.character(lubridate::year(data))\n  )\n\n\n\nExemplos de Criação de Features janeladas\n\n\n # features no tempo (exemplo) ---------------------\nteste <- indicadores_com_pad %>% \n  filter(id %in% c(406, 420), data %>% between(as.Date(\"2019-01-01\"), as.Date(\"2019-04-01\"))) %>%\n  select(id, data)\n\n# transformacoes\nteste %>%\n  arrange(id, data) %>%\n  group_by(id) %>%\n  mutate(\n    x = 1:n(),\n    a = cumsum(x),\n    b = lag(x),\n    c = lag(x, n = 2),\n    d = lead(x),\n    e = slider::slide_dbl(x, mean, .before = 1, .after = 0),\n    f = slider::slide_dbl(x, mean, .before = 0, .after = 0),\n    h = x/lag(x)\n  )\n\n\n# A tibble: 7 x 10\n# Groups:   id [2]\n  id    data           x     a     b     c     d     e     f     h\n  <chr> <date>     <int> <int> <int> <int> <int> <dbl> <dbl> <dbl>\n1 406   2019-02-01     1     1    NA    NA     2   1       1 NA   \n2 406   2019-03-01     2     3     1    NA     3   1.5     2  2   \n3 406   2019-04-01     3     6     2     1    NA   2.5     3  1.5 \n4 420   2019-01-01     1     1    NA    NA     2   1       1 NA   \n5 420   2019-02-01     2     3     1    NA     3   1.5     2  2   \n6 420   2019-03-01     3     6     2     1     4   2.5     3  1.5 \n7 420   2019-04-01     4    10     3     2    NA   3.5     4  1.33\n\nExemplo de Fluxo de Trabalho do Tidymodels\n\n\n# Pacotes ------------------------------------------------------------------\nlibrary(tidymodels)\nlibrary(ISLR)\nlibrary(tidyverse)\nlibrary(modeldata)\nlibrary(pROC)\nlibrary(vip)\n\n\n\nPASSO 0) CARREGAR AS BASES\n\n\ndata(\"credit_data\")\nhelp(credit_data)\ncredit_data <- credit_data %>% na.omit()\nglimpse(credit_data) # German Risk\n\n\nRows: 4,039\nColumns: 14\n$ Status    <fct> good, good, bad, good, good, good, good, good, goo…\n$ Seniority <int> 9, 17, 10, 0, 0, 1, 29, 9, 0, 0, 6, 7, 8, 19, 0, 0…\n$ Home      <fct> rent, rent, owner, rent, rent, owner, owner, paren…\n$ Time      <int> 60, 60, 36, 60, 36, 60, 60, 12, 60, 48, 48, 36, 60…\n$ Age       <int> 30, 58, 46, 24, 26, 36, 44, 27, 32, 41, 34, 29, 30…\n$ Marital   <fct> married, widow, married, single, single, married, …\n$ Records   <fct> no, no, yes, no, no, no, no, no, no, no, no, no, n…\n$ Job       <fct> freelance, fixed, freelance, fixed, fixed, fixed, …\n$ Expenses  <int> 73, 48, 90, 63, 46, 75, 75, 35, 90, 90, 60, 60, 75…\n$ Income    <int> 129, 131, 200, 182, 107, 214, 125, 80, 107, 80, 12…\n$ Assets    <int> 0, 0, 3000, 2500, 0, 3500, 10000, 0, 15000, 0, 400…\n$ Debt      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2500, 260, 0, …\n$ Amount    <int> 800, 1000, 2000, 900, 310, 650, 1600, 200, 1200, 1…\n$ Price     <int> 846, 1658, 2985, 1325, 910, 1645, 1800, 1093, 1957…\n\ncredit_data %>% count(Status)\n\n\n  Status    n\n1    bad 1026\n2   good 3013\n\nPASSO 1) BASE TREINO/TESTE\n\n\nset.seed(1)\ncredit_initial_split <- initial_split(credit_data, strata = \"Status\", p = 0.75)\n\ncredit_train <- training(credit_initial_split)\ncredit_test  <- testing(credit_initial_split)\n\n\n\nPASSO 2) EXPLORAR A BASE\n\n\n## Aqui é área livre!!!\nskimr::skim(credit_train)\n\n\nTable 1: Data summary\nName\ncredit_train\nNumber of rows\n3030\nNumber of columns\n14\n_______________________\n\nColumn type frequency:\n\nfactor\n5\nnumeric\n9\n________________________\n\nGroup variables\nNone\nVariable type: factor\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\nStatus\n0\n1\nFALSE\n2\ngoo: 2260, bad: 770\nHome\n0\n1\nFALSE\n6\nown: 1452, ren: 643, par: 564, oth: 194\nMarital\n0\n1\nFALSE\n5\nmar: 2188, sin: 674, sep: 89, wid: 54\nRecords\n0\n1\nFALSE\n2\nno: 2537, yes: 493\nJob\n0\n1\nFALSE\n4\nfix: 2066, fre: 524, par: 328, oth: 112\nVariable type: numeric\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nSeniority\n0\n1\n8.09\n8.15\n0\n2.00\n5.0\n12.00\n45\n▇▃▁▁▁\nTime\n0\n1\n46.68\n14.67\n6\n36.00\n48.0\n60.00\n72\n▁▂▃▃▇\nAge\n0\n1\n36.97\n11.00\n18\n28.00\n35.0\n45.00\n66\n▆▇▅▃▁\nExpenses\n0\n1\n55.54\n19.43\n35\n35.00\n49.5\n73.00\n173\n▇▃▁▁▁\nIncome\n0\n1\n140.45\n78.38\n8\n90.00\n125.0\n170.00\n959\n▇▂▁▁▁\nAssets\n0\n1\n5035.21\n9286.32\n0\n0.00\n3000.0\n6000.00\n200000\n▇▁▁▁▁\nDebt\n0\n1\n328.00\n1073.26\n0\n0.00\n0.0\n0.00\n21400\n▇▁▁▁▁\nAmount\n0\n1\n1025.78\n456.44\n100\n700.00\n1000.0\n1300.00\n4000\n▅▇▁▁▁\nPrice\n0\n1\n1443.13\n594.70\n105\n1111.25\n1400.0\n1672.75\n11140\n▇▁▁▁▁\n\nvisdat::vis_miss(credit_train)\n\n\n\ncorrr::correlate(credit_train %>% select(where(is.numeric))) %>% corrr::rplot()\n\n\n\n\nPASSO 3) DATAPREP\n\n\ncredit_recipe <- recipe(Status ~ ., data = credit_train) %>%\n  step_normalize(all_numeric()) %>%\n  step_impute_linear(Income, Assets, Debt, impute_with = imp_vars(Expenses)) %>%\n  step_modeimpute(Home) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  step_zv(all_predictors()) \n\n# olhando a base preparada\nbake(prep(credit_recipe), new_data = NULL)\n\n\n# A tibble: 3,030 x 23\n   Seniority    Time     Age Expenses Income Assets   Debt  Amount\n       <dbl>   <dbl>   <dbl>    <dbl>  <dbl>  <dbl>  <dbl>   <dbl>\n 1     0.112  0.908  -0.634     0.899 -0.146 -0.542 -0.306 -0.495 \n 2     1.09   0.908   1.91     -0.388 -0.121 -0.542 -0.306 -0.0565\n 3    -0.993  0.908  -1.18      0.384  0.530 -0.273 -0.306 -0.276 \n 4    -0.993 -0.728  -0.998    -0.491 -0.427 -0.542 -0.306 -1.57  \n 5    -0.870  0.908  -0.0883    1.00   0.938 -0.165 -0.306 -0.823 \n 6     2.57   0.908   0.639     1.00  -0.197  0.535 -0.306  1.26  \n 7     0.112 -2.36   -0.907    -1.06  -0.771 -0.542 -0.306 -1.81  \n 8    -0.993  0.908  -0.452     1.77  -0.427  1.07  -0.306  0.382 \n 9    -0.993  0.0900  0.366     1.77  -0.771 -0.542 -0.306  0.382 \n10    -0.256  0.0900 -0.270     0.230 -0.197 -0.111 -0.306  0.272 \n# … with 3,020 more rows, and 15 more variables: Price <dbl>,\n#   Status <fct>, Home_other <dbl>, Home_owner <dbl>,\n#   Home_parents <dbl>, Home_priv <dbl>, Home_rent <dbl>,\n#   Marital_married <dbl>, Marital_separated <dbl>,\n#   Marital_single <dbl>, Marital_widow <dbl>, Records_yes <dbl>,\n#   Job_freelance <dbl>, Job_others <dbl>, Job_partime <dbl>\n\nvisdat::vis_miss(bake(prep(credit_recipe), new_data = NULL))\n\n\n\n\nPASSO 4) MODELO\n\n\n# Definição de \n# a) a f(x): logistc_reg()\n# b) modo (natureza da var resp): classification\n# c) hiperparametros que queremos tunar: penalty = tune()\n# d) hiperparametros que não queremos tunar: mixture = 1 # LASSO\n# e) o motor que queremos usar: glmnet\ncredit_lr_model <- logistic_reg(penalty = tune(), mixture = 1) %>%\n  set_mode(\"classification\") %>%\n  set_engine(\"glmnet\")\n\n# workflow\ncredit_wf <- workflow() %>% add_model(credit_lr_model) %>% add_recipe(credit_recipe)\n\n\n\nPASSO 5) TUNAGEM DE HIPERPARÂMETROS\n\n\n# a) bases de reamostragem para validação: vfold_cv()\n# b) (opcional) grade de parâmetros: parameters() %>% update() %>% grid_regular()\n# c) tune_grid(y ~ x + ...)\n# d) escolha das métricas (rmse, roc_auc, etc)\n# d) collect_metrics() ou autoplot() para ver o resultado\ncredit_resamples <- vfold_cv(credit_train, v = 5)\n\ncredit_lr_tune_grid <- tune_grid(\n  credit_wf,\n  resamples = credit_resamples,\n  metrics = metric_set(\n    accuracy, \n    roc_auc\n    # kap, # KAPPA \n    # precision, \n    # recall, \n    # f_meas, \n    # mn_log_loss #binary cross entropy\n  )\n)\n\n\nautoplot(credit_lr_tune_grid)\n\n\n\n# minha versão do autoplot()\ncollect_metrics(credit_lr_tune_grid)\n\n\n# A tibble: 20 x 7\n    penalty .metric  .estimator  mean     n std_err .config           \n      <dbl> <chr>    <chr>      <dbl> <int>   <dbl> <chr>             \n 1 1.92e-10 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n 2 1.92e-10 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n 3 2.35e- 9 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n 4 2.35e- 9 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n 5 1.07e- 8 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n 6 1.07e- 8 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n 7 4.96e- 7 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n 8 4.96e- 7 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n 9 1.95e- 6 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n10 1.95e- 6 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n11 2.12e- 5 accuracy binary     0.804     5 0.00503 Preprocessor1_Mod…\n12 2.12e- 5 roc_auc  binary     0.832     5 0.00546 Preprocessor1_Mod…\n13 2.61e- 4 accuracy binary     0.803     5 0.00504 Preprocessor1_Mod…\n14 2.61e- 4 roc_auc  binary     0.832     5 0.00537 Preprocessor1_Mod…\n15 6.39e- 3 accuracy binary     0.803     5 0.00502 Preprocessor1_Mod…\n16 6.39e- 3 roc_auc  binary     0.829     5 0.00513 Preprocessor1_Mod…\n17 4.35e- 2 accuracy binary     0.767     5 0.00369 Preprocessor1_Mod…\n18 4.35e- 2 roc_auc  binary     0.799     5 0.00727 Preprocessor1_Mod…\n19 2.82e- 1 accuracy binary     0.746     5 0.00517 Preprocessor1_Mod…\n20 2.82e- 1 roc_auc  binary     0.5       5 0       Preprocessor1_Mod…\n\ncollect_metrics(credit_lr_tune_grid) %>%\n  ggplot(aes(x = penalty, y = mean)) +\n  geom_point() +\n  geom_errorbar(aes(ymin = mean - std_err, ymax = mean + std_err)) +\n  facet_wrap(~.metric, scales = \"free\") +\n  scale_x_log10()\n\n\n\n\nPASSO 6) DESEMPENHO DO MODELO FINAL\n\n\n# a) extrai melhor modelo com select_best()\n# b) finaliza o modelo inicial com finalize_model()\n# c) ajusta o modelo final com todos os dados de treino (bases de validação já era)\ncredit_lr_best_params <- select_best(credit_lr_tune_grid, \"roc_auc\")\ncredit_lr_model <- credit_lr_model %>% finalize_model(credit_lr_best_params)\n\ncredit_lr_last_fit <- last_fit(\n  credit_lr_model,\n  Status ~ .,\n  credit_initial_split\n)\n\n\n\nVariáveis importantes\n\n\ncredit_lr_last_fit_model <- credit_lr_last_fit$.workflow[[1]]$fit$fit\nvip(credit_lr_last_fit_model)\n\n\n\n\nMétricas de desempenho\n\n\ncollect_metrics(credit_lr_last_fit)\n\n\n# A tibble: 2 x 4\n  .metric  .estimator .estimate .config             \n  <chr>    <chr>          <dbl> <chr>               \n1 accuracy binary         0.809 Preprocessor1_Model1\n2 roc_auc  binary         0.827 Preprocessor1_Model1\n\ncredit_test_preds <- credit_lr_last_fit$.predictions[[1]]\n\n# roc\ncredit_roc_curve <- credit_test_preds %>% roc_curve(Status, .pred_bad)\nautoplot(credit_roc_curve)\n\n\n\n# confusion matrix\ncredit_test_preds %>%\n  mutate(\n    Status_class = factor(if_else(.pred_bad > 0.6, \"bad\", \"good\"))\n  ) %>%\n  conf_mat(Status, Status_class)\n\n\n          Truth\nPrediction bad good\n      bad   83   30\n      good 173  723\n\ngráficos extras\n\n\n# risco por faixa de score\ncredit_test_preds %>%\n  mutate(\n    score =  factor(ntile(.pred_bad, 10))\n  ) %>%\n  count(score, Status) %>%\n  ggplot(aes(x = score, y = n, fill = Status)) +\n  geom_col(position = \"fill\") +\n  geom_label(aes(label = n), position = \"fill\") +\n  coord_flip()\n\n\n\n# gráfico sobre os da classe \"bad\"\npercentis = 20\ncredit_test_preds %>%\n  mutate(\n    score = factor(ntile(.pred_bad, percentis))\n  ) %>%\n  filter(Status == \"bad\") %>%\n  group_by(score) %>%\n  summarise(\n    n = n(),\n    media = mean(.pred_bad)\n  ) %>%\n  mutate(p = n/sum(n)) %>%\n  ggplot(aes(x = p, y = score)) +\n  geom_col() +\n  geom_label(aes(label = scales::percent(p))) +\n  geom_vline(xintercept = 1/percentis, colour = \"red\", linetype = \"dashed\", size = 1)\n\n\n\n\nPASSO 7) MODELO FINAL\n\n\ncredit_final_lr_model <- credit_lr_model %>% fit(Status ~ ., credit_data)\n\n# salva tudo no computador\nwrite_rds(credit_lr_model, \"credit_lr_model.rds\")\nwrite_rds(credit_final_lr_model, \"credit_final_lr_model.rds\")\nwrite_rds(credit_lr_last_fit, \"credit_lr_last_fit.rds\")\n\n\n\nEXEMPLO DE DASHBOARD (link)\n\n\n\n",
    "preview": "posts/2021-05-12-regresso-logstica/regresso-logstica_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-05-12T14:50:59-03:00",
    "input_file": {}
  }
]
